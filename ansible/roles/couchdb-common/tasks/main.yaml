---
# Install dependencies on the host
- name: Install pip
  become: yes
  apt:
    name: ['python3-pip', 'software-properties-common', 'build-essential']
    state: latest
    update_cache: yes
  when: ansible_distribution == "Ubuntu"
# sudo apt-get update; sudo apt-get install python3-pip

- name: Update pip
  pip:
    name: ['pip']
    state: latest
# pip install --upgrade pip

# - name: print couchdbnode
#   debug: var=couchdb{{ ansible_default_ipv4.address }}

# - name: unsets
#   shell: unset http_proxy

# - name: unsets
#   shell: unset HTTP_PROXY

# - name: unsets
#   shell: unset https_proxy

# - name: unsets
#   shell: unset HTTPS_PROXY

# - name: unsets
#   shell: unset ftp_proxy

- name: Check if currently running db container
  shell: |
    docker ps --all --filter "name=couchdb{{ ansible_default_ipv4.address }}" --quiet
  register: container_exists

# - name: print container_exists
#   debug: var=container_exists.stdout_lines|length

- name: Stop previous db container
  shell: |
    docker stop $(docker ps --all --filter "name=couchdb{{ ansible_default_ipv4.address }}" --quiet) 
  when: container_exists.stdout_lines|length > 0

- name: Delete previous DB container
  shell: |
    docker rm $(docker ps --all --filter "name=couchdb{{ ansible_default_ipv4.address }}" --quiet) 
  when: container_exists.stdout_lines|length > 0

- name: Check if couchdb_path exists
  become: yes
  stat:
      path: "{{ couchdb_path }}"
  register: couchdb_path_stat

- name: debug
  debug: 
    msg: "{{ couchdb_path_stat }}"

- name: remove couchdb_path if it exists
  become: yes
  file:
    path: "{{ couchdb_path }}"
    state: absent
  when: not couchdb_path_stat.stat.exists

- name: Create couchdb_path
  become: yes
  file:
      path: "{{ couchdb_path }}"
      state: directory

- name: make filesystem on database volume
  become: yes
  filesystem:
    fstype: ext4
    dev: /dev/vdb

- name: mount database volume to couchdb_path
  become: yes
  mount: 
    path: "{{ couchdb_path }}"
    src: /dev/vdb
    fstype: ext4
    state: mounted

- name: Create container
  become: yes
  shell: |
    docker create \
    --publish 9100-9115:9100-9115 \
    --publish 5984:5984 \
    --publish 4369:4369 \
    --publish 80:80 \
    --name couchdb{{ ansible_default_ipv4.address }} \
    --env COUCHDB_USER={{ couchdb_user }} \
    --env COUCHDB_PASSWORD={{ couchdb_pass }} \
    --env COUCHDB_SECRET={{ couchdb_erl_cookie }} \
    --env ERL_FLAGS="-setcookie \"{{ couchdb_erl_cookie }}\" -name \"couchdb@{{ ansible_default_ipv4.address }}\" -kernel \"inet_dist_listen_min 9100\" -kernel \"inet_dist_listen_max 9115\"" \
    apache/couchdb:{{ couchdb_version }}

# -v {{ couchdb_path }}:/opt/couchdb/data \
# --env NODENAME=couchdb{{ ansible_default_ipv4.address }} \
# ibmcom/couchdb3:{{ couchdb_version }}

- name: Start container
  become: yes
  shell: "docker start couchdb{{ ansible_default_ipv4.address }}"

- name: Get MasterIP
  shell: "echo {{ hostvars['localhost']['MasterIP']['openstack_servers'][0]['public_v4']}}"
  register: MasterIP

- name: show MasterIP
  debug:
    msg: "{{ MasterIP.stdout }}"

- name: Wait to give the containers a chance to start
  wait_for:
    timeout: 20
  delegate_to: localhost

# - name: HTTP prepare as node
#   shell: |
#     curl -XPOST "http://{{ couchdb_user }}:{{ couchdb_pass }}@127.0.0.1:5984/_cluster_setup" \
#     --header "Content-Type: application/json" \
#     --data "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \
#     \"username\": \"{{ couchdb_user }}\", \"password\":\"{{ couchdb_pass }}\", \"node_count\": \"4\"}"

- name: HTTP call cluster setup
  shell: |
    curl -XPOST "http://{{ couchdb_user }}:{{ couchdb_pass }}@{{ MasterIP.stdout }}:5984/_cluster_setup" \
    --header "Content-Type: application/json" \
    --data "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \
    \"username\": \"{{ couchdb_user }}\", \"password\":\"{{ couchdb_pass }}\", \"port\": \"5984\", \
    \"remote_node\": \"couchdb{{ ansible_default_ipv4.address }}\", \"node_count\": \"4\", \
    \"remote_current_user\":\"{{ couchdb_user }}\", \"remote_current_password\":\"{{ couchdb_pass }}\"}"

- name: HTTP call cluster setup - node registration
  shell: |
    curl -XPOST "http://{{ couchdb_user }}:{{ couchdb_pass }}@{{ MasterIP.stdout }}:5984/_cluster_setup" \
    --header "Content-Type: application/json" \
    --data "{\"action\": \"add_node\", \"host\":\"{{ ansible_default_ipv4.address }}\", \
    \"port\": \"5984\", \"username\": \"{{ couchdb_user }}\", \"password\":\"{{ couchdb_pass }}\"}"

- name: HTTP call get / NB this is to accomodate a bug in CouchDB
  shell:
    curl http://{{ couchdb_user }}:{{ couchdb_pass }}@{{ MasterIP.stdout }}:5984/

- name: HTTP finish cluster setup
  shell: |
    curl -XPOST "http://{{ couchdb_user }}:{{ couchdb_pass }}@{{ MasterIP.stdout }}:5984/_cluster_setup" \
    --header "Content-Type: application/json" \
    --data "{\"action\": \"finish_cluster\"}"
  when: ansible_default_ipv4.address == MasterIP.stdout

# - name: Add couchdb repo
#   become: yes
#   apt_repository:
#     repo: ppa:couchdb/stable
#     state: present

# - name: Install CouchDB
#   become: yes
#   apt:
#     name: ['couchdb']
#     state: latest
#     update_cache: yes
#   when: ansible_distribution == "Ubuntu"

# - name: Pip install CouchDB
#   become: yes
#   pip:
#     name: ['CouchDB']
#     state: latest







# ============
# CONFIG FOR NODES
# ============
# #nodes should be IP of the instance
# #master node should be IP of master instance
# #other nodes should be IPs of all instances (Excluding the IP of the current instance)
# export declare -a nodes=(172.26.131.226)
# export declare -a masternode=172.26.131.226
# export declare -a othernodes=(172.26.128.166)
# export size=${#nodes[@]}
# export user='testuser'
# export pass='testpass'
# export VERSION='3.1.1'
# export cookie='a192aeb9904e6590849337933b000c99'

# ==========
# NOTE, RUN THE FOLLOWING BEFORE CONTINUING!! Rough fix, may need to fix properly by configuring proxy files differently on instances that need to scrape from external sites.

# unset http_proxy
# unset https_proxy
# unset ftp_proxy

# ===================================
# EDITED CREATE CONTAINER (correctly exposes ports etc.)
# ===================================

# for node in "${nodes[@]}" 
#   do
#     if [ ! -z $(docker ps --all --filter "name=couchdb${node}" --quiet) ] 
#        then
#          docker stop $(docker ps --all --filter "name=couchdb${node}" --quiet) 
#          docker rm $(docker ps --all --filter "name=couchdb${node}" --quiet)
#     fi 
# done

# for node in "${nodes[@]}" 
#   do
#     docker create\
#       --publish 9100-9115:9100-9115\
#       --publish 5984:5984\
#       --publish 4369:4369\
#       --name couchdb${node}\
#       -v DATABASEPATH:/opt/couchdb/data \
#       --env COUCHDB_USER=${user}\
#       --env COUCHDB_PASSWORD=${pass}\
#       --env COUCHDB_SECRET=${cookie}\
#       --env ERL_FLAGS="-setcookie \"${cookie}\" -name \"couchdb@${node}\""\
#       ibmcom/couchdb3:${VERSION}
#       --setcookie ${cookie}
# done

# =====================
# EDITED COMMUNICATION
# =====================

# for node in ${nodes} 
# do
#     curl -XPOST "http://${user}:${pass}@${masternode}:5984/_cluster_setup" \
#       --header "Content-Type: application/json"\
#       --data "{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\",\
#              \"username\": \"${user}\", \"password\":\"${pass}\", \"port\": \"5984\",\
#              \"remote_node\": \"${node}\", \"node_count\": \"$(echo ${nodes[@]} | wc -w)\",\
#              \"remote_current_user\":\"${user}\", \"remote_current_password\":\"${pass}\"}"
# done

# for node in ${nodes}
# do
#     curl -XPOST "http://${user}:${pass}@${masternode}:5984/_cluster_setup"\
#       --header "Content-Type: application/json"\
#       --data "{\"action\": \"add_node\", \"host\":\"${node}\",\
#              \"port\": \"5984\", \"username\": \"${user}\", \"password\":\"${pass}\"}"
# done
