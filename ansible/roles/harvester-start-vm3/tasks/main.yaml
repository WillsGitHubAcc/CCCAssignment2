---
- name: check if in swarm
  docker_swarm_info: 
  ignore_errors: yes
  register: swarm_status

- name: leave docker swarm if in it
  shell: docker swarm leave -f
  when: swarm_status.docker_swarm_active

- name: Check if currently running harvester containers
  shell: |
    docker ps --all --filter "ancestor=harvester{{ item }}" --quiet
  register: container_exists
  with_items:
    - 3
    - 4

# - name: debug
#   debug:
#     msg: "{{ container_exists.results|map(attribute='stdout_lines')|list|flatten  }}"

- name: Stop previous harvester containers
  shell: "docker stop {{ item }}"
  loop: "{{ container_exists.results|map(attribute='stdout_lines')|list|flatten }}"

- name: Delete previous harvester containers
  shell: "docker rm {{ item }}"
  loop: "{{ container_exists.results|map(attribute='stdout_lines')|list|flatten}}"

- name: build the harvesters
  shell: |
    docker build -t harvester{{ item }} --build-arg config=./configs/vm{{ item }}/config1.json --build-arg creds=./configs/credentials{{ item }}.json -f CCCAssignment2/twitter_harvester/Dockerfile .
  args:
    chdir: '/home/ubuntu/'
  with_items:
    - 3
    - 4

- name: docker swarm init
  shell: docker swarm init

- name: make docker swarm service
  docker_swarm_service:
    name: utc{{ item }}
    image: harvester{{ item }}
    command: python3
    networks: 
      - host
    # publish:
    #   published_port: 80
    #   target_port: 80
    env:
      HTTP_PROXY: http://wwwproxy.unimelb.edu.au:8000/
      HTTPS_PROXY: http://wwwproxy.unimelb.edu.au:8000/
      http_proxy: http://wwwproxy.unimelb.edu.au:8000/
      https_proxy: http://wwwproxy.unimelb.edu.au:8000/
      no_proxy: localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au
      NO_PROXY: localhost,127.0.0.1,localaddress,172.16.0.0/12,.melbourne.rc.nectar.org.au,.storage.unimelb.edu.au,.cloud.unimelb.edu.au
    args:
      - "twitter_harvester.py"
      - "-c"
      - "config.json"
      - "-k" 
      - "credentials.json"
      - "-m"
      - "users"
  # shell: docker service create --replicas 1 --name utc{{ item }} --network host harvester{{ item }} python3 twitter_harvester.py -c config.json -k credentials.json -m users
  with_items:
    - 3
    - 4


# - name: build the harvesters
#   shell: |
#     docker build -t harvester{{ item }} --build-arg config=./configs/vm3/config{{ item }}.json --build-arg creds=./configs/credentials3.json -f CCCAssignment2/twitter_harvester/Dockerfile .
#   args:
#     chdir: '/home/ubuntu/'
#   with_items:
#     - 1

# - name: Start harvester containers
#   shell: 'docker run -dit --network="host" harvester{{ item }}'
#   register: docker_ids
#   with_items:
#     - 1

# - name: docker execute the script
#   shell: "docker exec -dit {{ item.stdout }} python3 twitter_harvester.py -c config.json -k credentials.json -m users"
#   loop: "{{ docker_ids.results }}"
